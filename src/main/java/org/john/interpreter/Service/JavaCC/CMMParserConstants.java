/* Generated By:JavaCC: Do not edit this line. CMMParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CMMParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int DO = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int REAL = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int VOID = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int PRINT = 18;
  /** RegularExpression Id. */
  int SCAN = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int RETURN = 22;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 23;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 24;
  /** RegularExpression Id. */
  int HEX_LITERAL = 25;
  /** RegularExpression Id. */
  int REAL_LITERAL = 26;
  /** RegularExpression Id. */
  int EXPONENT = 27;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 28;
  /** RegularExpression Id. */
  int STRING_LITERAL = 29;
  /** RegularExpression Id. */
  int IDENTIFIER = 30;
  /** RegularExpression Id. */
  int LETTER = 31;
  /** RegularExpression Id. */
  int DIGIT = 32;
  /** RegularExpression Id. */
  int LPAREN = 33;
  /** RegularExpression Id. */
  int RPAREN = 34;
  /** RegularExpression Id. */
  int LBRACE = 35;
  /** RegularExpression Id. */
  int RBRACE = 36;
  /** RegularExpression Id. */
  int LBRACKET = 37;
  /** RegularExpression Id. */
  int RBRACKET = 38;
  /** RegularExpression Id. */
  int SEMICOLON = 39;
  /** RegularExpression Id. */
  int COMMA = 40;
  /** RegularExpression Id. */
  int DOT = 41;
  /** RegularExpression Id. */
  int UNDERSCORE = 42;
  /** RegularExpression Id. */
  int ASSIGN = 43;
  /** RegularExpression Id. */
  int PLUS = 44;
  /** RegularExpression Id. */
  int MINUS = 45;
  /** RegularExpression Id. */
  int TIMES = 46;
  /** RegularExpression Id. */
  int DIVIDE = 47;
  /** RegularExpression Id. */
  int MOD = 48;
  /** RegularExpression Id. */
  int BIT_OR = 49;
  /** RegularExpression Id. */
  int BIT_AND = 50;
  /** RegularExpression Id. */
  int XOR = 51;
  /** RegularExpression Id. */
  int TILDE = 52;
  /** RegularExpression Id. */
  int EQ = 53;
  /** RegularExpression Id. */
  int NEQ = 54;
  /** RegularExpression Id. */
  int GT = 55;
  /** RegularExpression Id. */
  int LT = 56;
  /** RegularExpression Id. */
  int GE = 57;
  /** RegularExpression Id. */
  int LE = 58;
  /** RegularExpression Id. */
  int SC_OR = 59;
  /** RegularExpression Id. */
  int SC_AND = 60;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"int\"",
    "\"real\"",
    "\"char\"",
    "\"void\"",
    "\"for\"",
    "\"print\"",
    "\"scan\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<REAL_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"_\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"|\"",
    "\"&\"",
    "\"^\"",
    "\"~\"",
    "\"==\"",
    "\"<>\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"||\"",
    "\"&&\"",
  };

}
