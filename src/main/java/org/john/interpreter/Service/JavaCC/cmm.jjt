/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  MULTI=true;
  KEEP_LINE_COLUMN = false;
}

PARSER_BEGIN(CMM)

/** An Arithmetic Grammar. */
public class CMM {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    CMM t = new CMM(System.in);
    try {
      ASTStart n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(CMM)

SKIP : /* 忽略字符 */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* 注释相关 */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* 关键字 */
{
  <IF: "if">
  | <ELSE: "else">
  | <WHILE: "while">
  | <DO: "do">
  | <INT: "int">
  | <REAL: "real">
  | <CHAR: "char">
  | <VOID: "void">
  | <FOR: "for">
  | <PRINT: "print">
  | <SCAN: "scan">
  | <BREAK: "break">
  | <CONTINUE: "continue">
  | <RETURN: "return">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> // 十进制数
      | <HEX_LITERAL>  // 十六进制数
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (<DIGIT>)* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < REAL_LITERAL:
        (<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
      | "." (<DIGIT>)+ (<EXPONENT>)?
      | (<DIGIT>)+ (<EXPONENT>)?
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (<DIGIT>)+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]   /* 考虑转义字符 */
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >

}

TOKEN : /* 标识符 */
{
  < IDENTIFIER: <LETTER> | <LETTER> (<LETTER>|<DIGIT>|<UNDERSCORE> )*(<LETTER> | <DIGIT>) >
|
  <#LETTER: ["a"-"z","A"-"Z"] >
|
  <#DIGIT: ["0"-"9"]>
}

TOKEN : /* 分隔符 */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : { /* 操作符 */
  <UNDERSCORE:"_">
   | <ASSIGN:"=">
   | <PLUS:"+">
   | <MINUS:"-">
   | <TIMES:"*">
   | <DIVIDE:"/">
   | <MOD:"%">
   | <BIT_OR:"|">
   | <BIT_AND:"&">
   | <XOR: "^" >
   | <TILDE:"~">
   | <EQ:"==">
   | <NEQ:"<>">
   | <GT: ">">
   | <LT:"<">
   | <GE:">=">
   | <LE:"<=">
   | <SC_OR:"||">
   | <SC_AND:"&&">
}
// 定义在最下方，优先级最低

ASTStart Start():{}
{
  Procedure()
  {return jjtThis;}
}
void Procedure():{}
{
  Statement() Procedure()
  | ["{" Procedure() "}" Procedure()]   //空如何表示
}

void Statement():{}
{
  Declare()
  | LOOKAHEAD( Assignment() )
    Assignment() <SEMICOLON>
  | Logic() <SEMICOLON>
  | IF()
  | WHILE()
  | FOR()
  | Interrupt()
  | <SEMICOLON>
}

void Declare():{}
{
  Type() Assign()
}

void Assignment():{}
{
  MyID() Index() <ASSIGN> O()
  // 满足 Con() 才选择 Con() 来推导
}
void Con() #void:{}
{
  <ASSIGN> O()
}
void Type():{}
{
  <INT>
  | <REAL>
  | <CHAR>
  | <VOID>
}
void Index():{}
{
  [ <LBRACKET> Logic() <RBRACKET> Index() ]
}
//void C()#void: {}
//{
//  [ <COMMA> Assignment() C() ]
//}
void Assign():{}
{
  MyID() F()
}
void F()#void:{}
{
  <LPAREN> Parameter() <RPAREN> <LBRACE> Procedure() <RBRACE>
  | (LOOKAHEAD(1) <LBRACKET> Logic() <RBRACKET> )+ [LOOKAHEAD(1) <ASSIGN> O() ] ( LOOKAHEAD(1) <COMMA> Assignment() )* <SEMICOLON>
  | [ <ASSIGN> O() ] ( LOOKAHEAD(1) <COMMA> <IDENTIFIER> Index() [<ASSIGN> O() ] )* <SEMICOLON>
}
void Parameter():{}
{
  [ Type() MyID() Index() ( LOOKAHEAD(1) <COMMA> Parameter() )*]
}
//void CC()#void:{}
//{
//  [ <COMMA> Parameter() ]
//}
void ConAssign():{}
{
  Assignment() ( LOOKAHEAD(1) <COMMA> Assignment() )*
}
void O()#void:{}
{
  Logic()
  | <LBRACE> Y() <RBRACE>
}
void Y()#void:{}
{
  [Logic() C1() ]
}
void C1()#void:{}
{
  [ <COMMA> Y() ]
}
void IF():{}
{
  <IF> <LPAREN> Logic() <RPAREN> H() ( LOOKAHEAD(2) ELSEIF() )* [ LOOKAHEAD(1) <ELSE> H() ]
}

void ELSEIF():{}
{
   <ELSE> <IF> <LPAREN> Logic() <RPAREN> H()
}

void WHILE():{}
{
  <WHILE> <LPAREN> Logic() <RPAREN> H()
}
void H()#void:{}
{
  Statement()
  | <LBRACE> Procedure() <RBRACE>  // procedure block
}
void FOR():{}
{
  <FOR> <LPAREN> DA() LO() AS() <RPAREN> H()
}
void DA()#void:{}
{
  Declare()
  | ConAssign() <SEMICOLON>
  | <SEMICOLON>
}
void LO()#void:{}
{
  Logic() <SEMICOLON>
  | <SEMICOLON>
}
void AS()#void:{}
{
  [ConAssign() ]
}
void Interrupt():{}
{
  <BREAK> <SEMICOLON>
  | <CONTINUE> <SEMICOLON>
  | <RETURN> Result() <SEMICOLON>
}
void Result():{}
{
  [Logic()]
}
void Logic():{}
{
  Relation() ( LogicOp() Relation() )*
}
void LogicOp():
{
   Token t;
 }
{
  t = <SC_OR>
   {
       jjtThis.setName(t.image);
     }
  | t = <SC_AND>
  {
    jjtThis.setName(t.image);
  }
}
void Relation():{}
{
  Arithmetic() (RelationOp() Arithmetic() )*
}
void RelationOp():
{
   Token t;
 }
{
  t = <EQ>
     {
         jjtThis.setName(t.image);
       }
  |t = <NEQ>
      {
          jjtThis.setName(t.image);
        }
  |t = <GE>
      {
          jjtThis.setName(t.image);
        }
  |t = <LE>
      {
          jjtThis.setName(t.image);
        }
  |t = <GT>
      {
          jjtThis.setName(t.image);
        }
  |t = <LT>
      {
          jjtThis.setName(t.image);
        }
}
void Arithmetic():{}
{
  Variable() (ArithOp() Variable() )*
}
void ArithOp():
{
  Token t;
 }
{
  t = <PLUS>
     {
         jjtThis.setName(t.image);
       }
  | t = <MINUS>
       {
           jjtThis.setName(t.image);
         }
  | t = <TIMES>
      {
          jjtThis.setName(t.image);
        }
  | t = <DIVIDE>
       {
           jjtThis.setName(t.image);
         }
  | t = <MOD>
       {
           jjtThis.setName(t.image);
         }
  | t = <XOR>
       {
           jjtThis.setName(t.image);
         }
  | t = <TILDE>
       {
           jjtThis.setName(t.image);
         }
  | t = <BIT_AND>
       {
           jjtThis.setName(t.image);
         }
  | t = <BIT_OR>
       {
           jjtThis.setName(t.image);
         }
}
void Variable():{}
{
  <LPAREN> Relation() <RPAREN>
//  | LOOKAHEAD(2) ID() Logic()  // 变量可以为 赋值操作
  | MyID() Call()
  | LOOKAHEAD(2) Digit()
  | SymbolVar()    //TODO look details of LOOKAHEAD
  | <PRINT> <LPAREN> Logic() <RPAREN>
  | <SCAN> <LPAREN> Logic() <RPAREN>
  | <CHARACTER_LITERAL>
  | <STRING_LITERAL>
}
void MyID():
{
  Token t;
}
{
  t = <IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}
void SymbolVar():{}
{
  <PLUS> MyID()
  | <MINUS> MyID()
  | <TILDE> MyID()
}
void Call():{}
{
  <LPAREN> Argument() <RPAREN>
  | Index()
}
void Argument():{}
{
  [ Logic() CCC() ]
}
void CCC()#void:{}
{
  [ <COMMA> Argument() ]
}
void Digit():{}
{
  Positive()
  | <MINUS> Positive()
  | <PLUS> Positive()
  | <TILDE> Positive()
}
void Positive()#void:{}
{
  MyInteger() | MyReal()
}
void MyInteger():
{
   Token t;
}
{
  t = <INTEGER_LITERAL>
  {
    jjtThis.setName(t.image);
  }
}
void MyReal():
{
   Token t;
}
{
  t = <REAL_LITERAL>
  {
    jjtThis.setName(t.image);
  }
}